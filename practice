getTweets: async (req, res, next) => {
    let offset = 0
    const whereQuery = {}
    if (req.query.page) {
      offset = (req.query.page - 1) * pageLimit
    }
    // if(req.query)

    try {
      const [result] = await Promise.all([
        Tweet.findAndCountAll({
          raw: true,
          nest: true,
          limit: pageLimit,
          where: whereQuery,
          offset: offset,
          order: [['createdAt', 'DESC']],
          include: [User]
        })
      ])

      const page = Number(req.query.page) || 1
      const pages = Math.ceil(result.count / pageLimit)
      const totalPage = Array.from({ length: pages }).map((item, index) => index + 1)
      const prev = page - 1 < 1 ? 1 : page - 1
      const next = page + 1 > pages ? pages : page + 1

      const data = result.rows.map(r => ({
        ...r.dataValues
        // content: r.dataValues.content.substring(0, 50)
      }))
      console.log(`data:${data}`)
      return res.render('tweets', {
        tweets: data,
        page,
        pages: pages <= 1 ? 'invisible' : '',
        totalPage,
        prev,
        next
      })
    } catch (error) {
      next(error)
    }
  },