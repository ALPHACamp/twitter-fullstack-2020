<div class="tweet-profile pt-4">
  <a href="/tweets">
    <h4 class="header ms-4 mb-4">{{>back}}<span class="ms-3 ">推文</span></h4>
  </a>
  <hr>
  <div class="d-flex flex-column h-100 p-3 w-100">
    {{!-- up --}}
    <div class="title d-flex mb-2 w-100">
      <div><img width="50" height="50" src="{{tweet.User.avatar}}" alt=""></div>
      <div class="d-flex flex-column ms-2">
        <span class="name me-2">{{tweet.User.name}}</span>
        <span class="account">@{{tweet.User.account}}</span>
      </div>
    </div>
    {{!-- middle --}}
    <div class="description  mb-2 w-100">
      {{tweet.description}}
    </div>
    {{!-- bottom --}}
    <div class="time mb-2 w-100">
      <span>{{tweet.createdAt.part}}
        {{tweet.createdAt.hour}}:{{tweet.createdAt.minute}}・{{tweet.createdAt.year}}年{{tweet.createdAt.month}}月{{tweet.createdAt.day}}日</span>
    </div>
    <hr>
    {{!-- count --}}
    <div class="reply-like-count my-3">
      <span class="reply number">{{tweet.replyCount}}</span><span class="text"> 回覆</span>
      <span class="like number ms-4">{{tweet.likeCount}}</span><span class="text"> 喜歡次數</span>
    </div>
    <hr>
    {{!-- button --}}
    <div class="reply-like-button mt-3" id="{{tweet.id}}">
      <button onclick="replyOfProfile(this)" data-bs-toggle="modal" data-bs-target="#reply">
        <span>{{>reply-30}}</span>
      </button>
      <button class="like {{#if tweet.isLiked}}liked{{/if}}" onclick="likeOfProfile(this)">
        <span class="isLiked">{{>like-filled-30}}</span>
        <span class="notLiked">{{>like-30}}</span>
      </button>
    </div>
  </div>
</div>
{{>tweet-reply}}


<script>
  async function likeOfProfile(button) {
    const tweetId = button.parentElement.id
    const likeCountElement = document.querySelector('.like.number');
    try {
      if (!button.classList.contains('liked')) {
        const response = await fetch(`/api/tweets/${tweetId}/like`, { method: 'POST' })
        const data = await response.json()
        likeCountElement.textContent = data.likeCount
        if (data.isLiked) button.classList.toggle('liked') //remove liked
      } else if (button.classList.contains('liked')) {
        const response = await fetch(`/api/tweets/${tweetId}/like`, { method: 'DELETE' })
        const data = await response.json()
        likeCountElement.textContent = data.likeCount
        if (data.isLiked === false) button.classList.toggle('liked') //add liked
      }

    } catch (error) {
      console.error(error)
    }
  }

  async function replyOfProfile(button) {
      const tweetId = button.parentElement.id
      const templateSource = document.getElementById('tweet-template')
      const tweetHTML = document.querySelector('.reply.modal .tweet')
      try {
        console.log('11')
        const response = await fetch(`/api/tweets/${tweetId}/`, { method: 'GET' })
        const data = await response.json()
        const template = Handlebars.compile(templateSource.innerHTML);
        const html = template({ tweet: data.tweet });
        console.log(html)
        tweetHTML.innerHTML = html

      } catch (error) {
        console.error(error)
      }
    }
</script>